// Code generated by mockery v2.10.6. DO NOT EDIT.

package storagemocks

import (
	context "context"

	internal "github.com/patriciabonaldy/sports-news/internal"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetArticleByID provides a mock function with given fields: ctx, ID
func (_m *Storage) GetArticleByID(ctx context.Context, ID string) (*internal.ArticleNews, error) {
	ret := _m.Called(ctx, ID)

	var r0 *internal.ArticleNews
	if rf, ok := ret.Get(0).(func(context.Context, string) *internal.ArticleNews); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.ArticleNews)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticles provides a mock function with given fields: ctx
func (_m *Storage) GetArticles(ctx context.Context) ([]internal.ArticleNews, error) {
	ret := _m.Called(ctx)

	var r0 []internal.ArticleNews
	if rf, ok := ret.Get(0).(func(context.Context) []internal.ArticleNews); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.ArticleNews)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, news
func (_m *Storage) Save(ctx context.Context, news internal.ArticleNews) error {
	ret := _m.Called(ctx, news)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.ArticleNews) error); ok {
		r0 = rf(ctx, news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
